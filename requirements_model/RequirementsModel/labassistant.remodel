UseCaseModel LabAssistant {

	UC::managePlans definedBySSD(ManagePlansSSD) relatedService(ManagePlansService)
	UC::supervisePlans definedBySSD(SupervisePlansSSD) relatedService(SupervisePlansService)
	UC::manageFile definedBySSD(ManageFileSSD) relatedService(ManageFileService)
	UC::representInfo
	UC::shareFile
	UC::cancelSharing
	UC::createWeekly definedBySSD(CreateWeeklySSD) relatedService(CreateWeeklyService)
	UC::assignTask definedBySSD(AssignTaskSSD) relatedService(AssignTaskService)
	UC::viewWeekly definedBySSD(ViewWeeklySSD) relatedService(ViewWeeklyService)
	UC::updateTaskProcession definedBySSD(UpdateTaskProcessionSSD) relatedService(UpdateTaskProcessionService)
	UC::reportProblem definedBySSD(ReportProblemSSD) relatedService(ReportProblemService)

	Actor Teacher {
		supervisePlans
	createWeekly
		assignTask
	}

	Actor Student {
	updateTaskProcession
		reportProblem
	}

	Actor User {
		managePlans
		manageFile
		representInfo
		shareFile
		cancelSharing
	viewWeekly
	}

	Interaction ManagePlansSSD {

		[Participants: User ManagePlansService]

		CallMessage::ManagePlansSSDCallMessage1(inputPlanInformation ManagePlansSSDCallMessage1SendingEnd -> ManagePlansSSDExecution1StartEnd)
		ReturnMessage::ManagePlansSSDCallMessage1Return(ManagePlansSSDExecution1FinishEnd -> ManagePlansSSDCallMessage1ReturnReceivingEnd ManagePlansSSDCallMessage1)

		Execution::ManagePlansSSDExecution1(ManagePlansService ManagePlansSSDExecution1StartEnd ManagePlansSSDExecution1FinishEnd)

		MessageEnd::ManagePlansSSDCallMessage1SendingEnd(User ManagePlansSSDCallMessage1)
		ExecutionEnd::ManagePlansSSDExecution1StartEnd(ManagePlansService ManagePlansSSDExecution1)
		ExecutionEnd::ManagePlansSSDExecution1FinishEnd(ManagePlansService ManagePlansSSDExecution1)
		MessageEnd::ManagePlansSSDCallMessage1ReturnReceivingEnd(User ManagePlansSSDCallMessage1Return)

	}

	Interaction SupervisePlansSSD {

		[Participants: Teacher SupervisePlansService]

		CallMessage::SupervisePlansSSDCallMessage1(selectPlan SupervisePlansSSDCallMessage1SendingEnd -> SupervisePlansSSDExecution1StartEnd)
		ReturnMessage::SupervisePlansSSDCallMessage1Return(SupervisePlansSSDExecution1FinishEnd -> SupervisePlansSSDCallMessage1ReturnReceivingEnd SupervisePlansSSDCallMessage1)
		CallMessage::SupervisePlansSSDCallMessage3(inputReviewMessage SupervisePlansSSDCallMessage3SendingEnd -> SupervisePlansSSDExecution2StartEnd)
		ReturnMessage::SupervisePlansSSDCallMessage3Return(SupervisePlansSSDExecution2FinishEnd -> SupervisePlansSSDCallMessage3ReturnReceivingEnd SupervisePlansSSDCallMessage3)

		Execution::SupervisePlansSSDExecution1(SupervisePlansService SupervisePlansSSDExecution1StartEnd SupervisePlansSSDExecution1FinishEnd)
		Execution::SupervisePlansSSDExecution2(SupervisePlansService SupervisePlansSSDExecution2StartEnd SupervisePlansSSDExecution2FinishEnd)

		MessageEnd::SupervisePlansSSDCallMessage1SendingEnd(Teacher SupervisePlansSSDCallMessage1)
		ExecutionEnd::SupervisePlansSSDExecution1StartEnd(SupervisePlansService SupervisePlansSSDExecution1)
		ExecutionEnd::SupervisePlansSSDExecution1FinishEnd(SupervisePlansService SupervisePlansSSDExecution1)
		MessageEnd::SupervisePlansSSDCallMessage1ReturnReceivingEnd(Teacher SupervisePlansSSDCallMessage1Return)
		MessageEnd::SupervisePlansSSDCallMessage3SendingEnd(Teacher SupervisePlansSSDCallMessage3)
		ExecutionEnd::SupervisePlansSSDExecution2StartEnd(SupervisePlansService SupervisePlansSSDExecution2)
		ExecutionEnd::SupervisePlansSSDExecution2FinishEnd(SupervisePlansService SupervisePlansSSDExecution2)
		MessageEnd::SupervisePlansSSDCallMessage3ReturnReceivingEnd(Teacher SupervisePlansSSDCallMessage3Return)

	}

	Interaction ManageFileSSD {

		[Participants: User ManageFileService]

		CallMessage::ManageFileSSDCallMessage1(addFile ManageFileSSDCallMessage1SendingEnd -> ManageFileSSDExecution1StartEnd)
		ReturnMessage::ManageFileSSDCallMessage1Return(ManageFileSSDExecution1FinishEnd -> ManageFileSSDCallMessage1ReturnReceivingEnd ManageFileSSDCallMessage1)
		CallMessage::ManageFileSSDCallMessage3(deleteFile ManageFileSSDCallMessage3SendingEnd -> ManageFileSSDExecution2StartEnd)
		ReturnMessage::ManageFileSSDCallMessage3Return(ManageFileSSDExecution2FinishEnd -> ManageFileSSDCallMessage3ReturnReceivingEnd ManageFileSSDCallMessage3)

		Execution::ManageFileSSDExecution1(ManageFileService ManageFileSSDExecution1StartEnd ManageFileSSDExecution1FinishEnd)
		Execution::ManageFileSSDExecution2(ManageFileService ManageFileSSDExecution2StartEnd ManageFileSSDExecution2FinishEnd)

		MessageEnd::ManageFileSSDCallMessage1SendingEnd(User ManageFileSSDCallMessage1)
		ExecutionEnd::ManageFileSSDExecution1StartEnd(ManageFileService ManageFileSSDExecution1)
		ExecutionEnd::ManageFileSSDExecution1FinishEnd(ManageFileService ManageFileSSDExecution1)
		MessageEnd::ManageFileSSDCallMessage1ReturnReceivingEnd(User ManageFileSSDCallMessage1Return)
		MessageEnd::ManageFileSSDCallMessage3SendingEnd(User ManageFileSSDCallMessage3)
		ExecutionEnd::ManageFileSSDExecution2StartEnd(ManageFileService ManageFileSSDExecution2)
		ExecutionEnd::ManageFileSSDExecution2FinishEnd(ManageFileService ManageFileSSDExecution2)
		MessageEnd::ManageFileSSDCallMessage3ReturnReceivingEnd(User ManageFileSSDCallMessage3Return)

	}

	Interaction CreateWeeklySSD {

		[Participants: Teacher CreateWeeklyService]

		CallMessage::CreateWeeklySSDCallMessage1(createWeeklyByTeacher CreateWeeklySSDCallMessage1SendingEnd -> CreateWeeklySSDExecution1StartEnd)
		ReturnMessage::CreateWeeklySSDCallMessage1Return(CreateWeeklySSDExecution1FinishEnd -> CreateWeeklySSDCallMessage1ReturnReceivingEnd CreateWeeklySSDCallMessage1)

		Execution::CreateWeeklySSDExecution1(CreateWeeklyService CreateWeeklySSDExecution1StartEnd CreateWeeklySSDExecution1FinishEnd)

		MessageEnd::CreateWeeklySSDCallMessage1SendingEnd(Teacher CreateWeeklySSDCallMessage1)
		ExecutionEnd::CreateWeeklySSDExecution1StartEnd(CreateWeeklyService CreateWeeklySSDExecution1)
		ExecutionEnd::CreateWeeklySSDExecution1FinishEnd(CreateWeeklyService CreateWeeklySSDExecution1)
		MessageEnd::CreateWeeklySSDCallMessage1ReturnReceivingEnd(Teacher CreateWeeklySSDCallMessage1Return)

	}

	Interaction AssignTaskSSD {

		[Participants: Teacher AssignTaskService]

		CallMessage::AssignTaskSSDCallMessage1(assignTaskByTeacher AssignTaskSSDCallMessage1SendingEnd -> AssignTaskSSDExecution1StartEnd)
		ReturnMessage::AssignTaskSSDCallMessage1Return(AssignTaskSSDExecution1FinishEnd -> AssignTaskSSDCallMessage1ReturnReceivingEnd AssignTaskSSDCallMessage1)
		CallMessage::AssignTaskSSDCallMessage3(createTaskByTeacher AssignTaskSSDCallMessage3SendingEnd -> AssignTaskSSDExecution2StartEnd)
		ReturnMessage::AssignTaskSSDCallMessage3Return(AssignTaskSSDExecution2FinishEnd -> AssignTaskSSDCallMessage3ReturnReceivingEnd AssignTaskSSDCallMessage3)

		Execution::AssignTaskSSDExecution1(AssignTaskService AssignTaskSSDExecution1StartEnd AssignTaskSSDExecution1FinishEnd)
		Execution::AssignTaskSSDExecution2(AssignTaskService AssignTaskSSDExecution2StartEnd AssignTaskSSDExecution2FinishEnd)

		MessageEnd::AssignTaskSSDCallMessage3SendingEnd(Teacher AssignTaskSSDCallMessage3)
		ExecutionEnd::AssignTaskSSDExecution2StartEnd(AssignTaskService AssignTaskSSDExecution2)
		ExecutionEnd::AssignTaskSSDExecution2FinishEnd(AssignTaskService AssignTaskSSDExecution2)
		MessageEnd::AssignTaskSSDCallMessage3ReturnReceivingEnd(Teacher AssignTaskSSDCallMessage3Return)
		MessageEnd::AssignTaskSSDCallMessage1SendingEnd(Teacher AssignTaskSSDCallMessage1)
		ExecutionEnd::AssignTaskSSDExecution1StartEnd(AssignTaskService AssignTaskSSDExecution1)
		ExecutionEnd::AssignTaskSSDExecution1FinishEnd(AssignTaskService AssignTaskSSDExecution1)
		MessageEnd::AssignTaskSSDCallMessage1ReturnReceivingEnd(Teacher AssignTaskSSDCallMessage1Return)

	}

	Interaction ViewWeeklySSD {

		[Participants: User ViewWeeklyService]

		CallMessage::ViewWeeklySSDCallMessage1(viewWeeklyByUser ViewWeeklySSDCallMessage1SendingEnd -> ViewWeeklySSDExecution1StartEnd)
		ReturnMessage::ViewWeeklySSDCallMessage1Return(ViewWeeklySSDExecution1FinishEnd -> ViewWeeklySSDCallMessage1ReturnReceivingEnd ViewWeeklySSDCallMessage1)

		Execution::ViewWeeklySSDExecution1(ViewWeeklyService ViewWeeklySSDExecution1StartEnd ViewWeeklySSDExecution1FinishEnd)

		MessageEnd::ViewWeeklySSDCallMessage1SendingEnd(User ViewWeeklySSDCallMessage1)
		ExecutionEnd::ViewWeeklySSDExecution1StartEnd(ViewWeeklyService ViewWeeklySSDExecution1)
		ExecutionEnd::ViewWeeklySSDExecution1FinishEnd(ViewWeeklyService ViewWeeklySSDExecution1)
		MessageEnd::ViewWeeklySSDCallMessage1ReturnReceivingEnd(User ViewWeeklySSDCallMessage1Return)

	}

	Interaction UpdateTaskProcessionSSD {

		[Participants: Student UpdateTaskProcessionService]

		CallMessage::UpdateTaskProcessionSSDCallMessage1(updateProcessionByOwner UpdateTaskProcessionSSDCallMessage1SendingEnd -> UpdateTaskProcessionSSDExecution1StartEnd)
		ReturnMessage::UpdateTaskProcessionSSDCallMessage1Return(UpdateTaskProcessionSSDExecution1FinishEnd -> UpdateTaskProcessionSSDCallMessage1ReturnReceivingEnd UpdateTaskProcessionSSDCallMessage1)

		Execution::UpdateTaskProcessionSSDExecution1(UpdateTaskProcessionService UpdateTaskProcessionSSDExecution1StartEnd UpdateTaskProcessionSSDExecution1FinishEnd)

		MessageEnd::UpdateTaskProcessionSSDCallMessage1SendingEnd(Student UpdateTaskProcessionSSDCallMessage1)
		ExecutionEnd::UpdateTaskProcessionSSDExecution1StartEnd(UpdateTaskProcessionService UpdateTaskProcessionSSDExecution1)
		ExecutionEnd::UpdateTaskProcessionSSDExecution1FinishEnd(UpdateTaskProcessionService UpdateTaskProcessionSSDExecution1)
		MessageEnd::UpdateTaskProcessionSSDCallMessage1ReturnReceivingEnd(Student UpdateTaskProcessionSSDCallMessage1Return)

	}

	Interaction ReportProblemSSD {

		[Participants: Student ReportProblemService]

		CallMessage::ReportProblemSSDCallMessage1(reportProblem ReportProblemSSDCallMessage1SendingEnd -> ReportProblemSSDExecution1StartEnd)
		ReturnMessage::ReportProblemSSDCallMessage1Return(ReportProblemSSDExecution1FinishEnd -> ReportProblemSSDCallMessage1ReturnReceivingEnd ReportProblemSSDCallMessage1)

		Execution::ReportProblemSSDExecution1(ReportProblemService ReportProblemSSDExecution1StartEnd ReportProblemSSDExecution1FinishEnd)

		MessageEnd::ReportProblemSSDCallMessage1SendingEnd(Student ReportProblemSSDCallMessage1)
		ExecutionEnd::ReportProblemSSDExecution1StartEnd(ReportProblemService ReportProblemSSDExecution1)
		ExecutionEnd::ReportProblemSSDExecution1FinishEnd(ReportProblemService ReportProblemSSDExecution1)
		MessageEnd::ReportProblemSSDCallMessage1ReturnReceivingEnd(Student ReportProblemSSDCallMessage1Return)

	}

	Service LabAssistantSystem {

	}

	Service ThirdPartyServices {

	}

	Service ManagePlansService {

		[Operation]
		inputPlanInformation(plan)
		createPlan(id, title, content, beginDate, endDate, creatorId, type)
		queryPlanById(id)
		queryPlanByCreatorId(id)
		modifyPlan(id, title, content, beginDate, endDate, creatorId, type)
		deletePlan(id)

	}

	Service SupervisePlansService {

		[Operation]
		selectPlan()
		inputReviewMessage()

	}

	Service ManageFileService {

		[Operation]
		addFile(userid, fileid, fileName)
		deleteFile(userid, fileid)

	}

	Service CreateWeeklyService {

		[Operation]
		createWeeklyByTeacher(creatorId, weeklyId, content, weekNum, beginDate, endDate)

	}

	Service AssignTaskService {

		[Operation]
		assignTaskByTeacher(taskId, creatorId, ownerId)
		createTaskByTeacher(creatorId, taskId, content)

	}

	Service ViewWeeklyService {

		[Operation]
		viewWeeklyByUser(weeklyId)

	}

	Service UpdateTaskProcessionService {

		[Operation]
		updateProcessionByOwner(taskId, ownerId, progress)

	}

	Service ReportProblemService {

		[Operation]
		reportProblem(taskId, problem, ownerId)

	}

	Contract ManagePlansService::inputPlanInformation(plan) : Boolean {

		precondition:
			true
		postcondition:
			true
	}

	Contract ManagePlansService::createPlan(id : String, title : String, content : String, beginDate : String, endDate : String, creatorId : String, type : String) : Boolean {

		definition:
			plan:Plan = Plan.allInstance()->any(pla:Plan | pla.id = id)

		precondition:
			plan.oclIsUndefined() = true

		postcondition:
			let pla:Plan in
			pla.oclIsNew() and
			pla.id = id and
			pla.title = title and
			pla.content = content and
			pla.beginDate = beginDate and
			pla.endDate = endDate and
			pla.creatorId = creatorId and
			pla.type = type and
			Plan.allInstance()->includes(pla) and
			result = true
	}

	Contract ManagePlansService::queryPlanById(id : String) : Boolean {

		precondition:
			true
		postcondition:
			true
	}

	Contract ManageFileService::addFile(userid : Integer, fileid : Integer, fileName : String) : Boolean {

		definition:
			user:User = User.allInstance()->any(use:User | use.Id = userid),
			fff:MyFile = MyFile.allInstance()->any(fffff:MyFile | fffff.FileID = fileid)

		precondition:
			fff.oclIsUndefined() = true and
			user.oclIsUndefined() = false

		postcondition:
			let fff:MyFile in
			fff.oclIsNew() and
			fff.OwnerID = userid and
			fff.FileName = fileName and
			fff.FileID = fileid and
			MyFile.allInstance()->includes(fff) and
			result = true
	}

	Contract ManageFileService::deleteFile(userid : Integer, fileid : Integer) : Boolean {

		definition:
			fff:MyFile = MyFile.allInstance()->any(fffff:MyFile | fffff.FileID = fileid),
			usr:User = User.allInstance()->any(uuuuu:User | uuuuu.Id = userid)

		precondition:
			fff.oclIsUndefined() = false and
			usr.oclIsUndefined() = false and
			MyFile.allInstance()->includes(fff) and
			User.allInstance()->includes(usr)

		postcondition:
			MyFile.allInstance()->excludes(fff) and
			result = true
	}

}

DomainModel LabAssistant {

	@AutoCRUD Entity User {
		Id : Integer
		Username : String
		Password : String
		Email : String
		Phone : String
		Role : String

		[Refer]
		UsertoPlan : Plan* Association
		Browses : MyFile* Association
		Teacher : User Association
	UsertoWeekly : Weekly* Association
		create : Task Association
		own : Task Association
	}

	@AutoCRUD Entity Plan {
		Id : Integer
		Title : String
		Content : String
		BeginDate : Date
		EndDate : Date
		CreatorId : Integer
		Type : String
	}

	Entity MyFile {
		OwnerID : Integer
		FileName : String
		FileID : Integer
	}

Entity Weekly {
		Id : Integer
		content : String
		WeekNum : Integer
		BeginDate : Date
		EndDate : Date
		CreatorId : Integer
		problem : String
		progress : Real
	}

	Entity Task {
		Id : Integer
		content : String
		creatorId : Integer
		ownerId : Integer
	}

}

