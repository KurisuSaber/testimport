UseCaseModel LabAssistant {

	UC::managePlans definedBySSD(ManagePlansSSD) relatedService(ManagePlansService)
	UC::supervisePlans definedBySSD(SupervisePlansSSD) relatedService(SupervisePlansService)

	Actor Teacher {
		supervisePlans
	}

	Actor Student {
	}

	Actor User {
		managePlans
	}

	Interaction ManagePlansSSD {

		[Participants: User ManagePlansService]

		CallMessage::ManagePlansSSDCallMessage1(inputPlanInformation ManagePlansSSDCallMessage1SendingEnd -> ManagePlansSSDExecution1StartEnd)
		ReturnMessage::ManagePlansSSDCallMessage1Return(ManagePlansSSDExecution1FinishEnd -> ManagePlansSSDCallMessage1ReturnReceivingEnd ManagePlansSSDCallMessage1)

		Execution::ManagePlansSSDExecution1(ManagePlansService ManagePlansSSDExecution1StartEnd ManagePlansSSDExecution1FinishEnd)

		MessageEnd::ManagePlansSSDCallMessage1SendingEnd(User ManagePlansSSDCallMessage1)
		ExecutionEnd::ManagePlansSSDExecution1StartEnd(ManagePlansService ManagePlansSSDExecution1)
		ExecutionEnd::ManagePlansSSDExecution1FinishEnd(ManagePlansService ManagePlansSSDExecution1)
		MessageEnd::ManagePlansSSDCallMessage1ReturnReceivingEnd(User ManagePlansSSDCallMessage1Return)

	}

	Interaction SupervisePlansSSD {

		[Participants: Teacher SupervisePlansService]

		CallMessage::SupervisePlansSSDCallMessage1(selectPlan SupervisePlansSSDCallMessage1SendingEnd -> SupervisePlansSSDExecution1StartEnd)
		ReturnMessage::SupervisePlansSSDCallMessage1Return(SupervisePlansSSDExecution1FinishEnd -> SupervisePlansSSDCallMessage1ReturnReceivingEnd SupervisePlansSSDCallMessage1)
		CallMessage::SupervisePlansSSDCallMessage3(inputReviewMessage SupervisePlansSSDCallMessage3SendingEnd -> SupervisePlansSSDExecution2StartEnd)
		ReturnMessage::SupervisePlansSSDCallMessage3Return(SupervisePlansSSDExecution2FinishEnd -> SupervisePlansSSDCallMessage3ReturnReceivingEnd SupervisePlansSSDCallMessage3)

		Execution::SupervisePlansSSDExecution1(SupervisePlansService SupervisePlansSSDExecution1StartEnd SupervisePlansSSDExecution1FinishEnd)
		Execution::SupervisePlansSSDExecution2(SupervisePlansService SupervisePlansSSDExecution2StartEnd SupervisePlansSSDExecution2FinishEnd)

		MessageEnd::SupervisePlansSSDCallMessage1SendingEnd(Teacher SupervisePlansSSDCallMessage1)
		ExecutionEnd::SupervisePlansSSDExecution1StartEnd(SupervisePlansService SupervisePlansSSDExecution1)
		ExecutionEnd::SupervisePlansSSDExecution1FinishEnd(SupervisePlansService SupervisePlansSSDExecution1)
		MessageEnd::SupervisePlansSSDCallMessage1ReturnReceivingEnd(Teacher SupervisePlansSSDCallMessage1Return)
		MessageEnd::SupervisePlansSSDCallMessage3SendingEnd(Teacher SupervisePlansSSDCallMessage3)
		ExecutionEnd::SupervisePlansSSDExecution2StartEnd(SupervisePlansService SupervisePlansSSDExecution2)
		ExecutionEnd::SupervisePlansSSDExecution2FinishEnd(SupervisePlansService SupervisePlansSSDExecution2)
		MessageEnd::SupervisePlansSSDCallMessage3ReturnReceivingEnd(Teacher SupervisePlansSSDCallMessage3Return)

	}

	Service LabAssistantSystem {

	}

	Service ThirdPartyServices {

	}

	Service ManagePlansService {

		[Operation]
		inputPlanInformation(plan)
		createPlan(id, title, content, beginDate, endDate, creatorId, type)
		queryPlanById(id)
		queryPlanByCreatorId(id)
		modifyPlan(id, title, content, beginDate, endDate, creatorId, type)
		deletePlan(id)

	}

	Service SupervisePlansService {

		[Operation]
		selectPlan()
		inputReviewMessage()

	}

	Contract ManagePlansService::inputPlanInformation(plan) : Boolean {

		precondition:
			true
		postcondition:
			true
	}

	Contract ManagePlansService::createPlan(id : String, title : String, content : String, beginDate : String, endDate : String, creatorId : String, type : String) : Boolean {

		definition:
			plan:Plan = Plan.allInstance()->any(pla:Plan | pla.id = id)

		precondition:
			plan.oclIsUndefined() = true

		postcondition:
			let pla:Plan in
			pla.oclIsNew() and
			pla.id = id and
			pla.title = title and
			pla.content = content and
			pla.beginDate = beginDate and
			pla.endDate = endDate and
			pla.creatorId = creatorId and
			pla.type = type and
			Plan.allInstance()->includes(pla) and
			result = true
	}

	Contract ManagePlansService::queryPlanById(id : String) : Boolean {

		precondition:
			true
		postcondition:
			true
	}

}

DomainModel LabAssistant {

	@AutoCRUD Entity User {
		Id : Integer
		Username : String
		Password : String
		Email : String
		Phone : String
		Role : String

		[Refer]
		UsertoPlan : Plan* Association
	}

	@AutoCRUD Entity Plan {
		Id : Integer
		Title : String
		Content : String
		BeginDate : Date
		EndDate : Date
		CreatorId : Integer
		Type : String
	}

}

