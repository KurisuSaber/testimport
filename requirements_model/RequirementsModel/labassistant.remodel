UseCaseModel LabAssistant {

	UC::assignTask
	UC::launchTask
	UC::viewWeekly
	UC::updateTaskProcession
	UC::uploadProblem
	UC::createWeekly
	UC::managePlans definedBySSD(ManagePlansSSD) relatedService(ManagePlansService)
	UC::supervisePlans
	UC::representInfo
	UC::manageFile
	UC::shareFile
	UC::cancelShare
	UC::reserveMeeting
	UC::informStudents
	UC::organizeSignIn
	UC::makeConclusion
	UC::receiveNotification
	UC::checkIn

	Actor Teacher {
		viewWeekly
		assignTask
		createWeekly
		launchTask
		managePlans
		supervisePlans
		representInfo
		manageFile
		shareFile
		cancelShare
		reserveMeeting
		informStudents
		organizeSignIn
		makeConclusion
	}

	Actor Student {
		updateTaskProcession
		viewWeekly
		uploadProblem
		managePlans
		representInfo
		manageFile
		shareFile
		cancelShare
		receiveNotification
		checkIn
	}

	Interaction ManagePlansSSD {

		[Participants: Teacher Student ManagePlansService]

	}

	Service LabAssistantSystem {

		[Operation]
		representInfo()
		assignTask()
		checkIn()
		receiveNotification()
		makeConclusion()
		organizeSignIn()
		informStudents()
		reserveMeeting()
		cancelShare()
		shareFile()
		manageFile()
		supervisePlans()
		managePlans()
		createWeekly()
		uploadProblem()
		launchTask()
		updateTaskProcession()
		viewWeekly()

	}

	Service ThirdPartyServices {

	}

Service ManagePlansService {

	}

}

DomainModel LabAssistant {

	@AutoCRUD Entity User {
		Id : Integer
		Name : String
		Password : String
		Email : String
		Phone : String
		Role : String

		[Refer]
		UsertoPlan : Plan* Association
	}

	@AutoCRUD Entity Plan {
		Id : Integer
		Title : String
		Content : String
		Type : String
		CreatorId : Integer
		BeginDate : Date
		EndDate : Date
	}

}

